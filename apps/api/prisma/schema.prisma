generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  /// Primary key
  pk                BigInt   @id @default(autoincrement())
  /// UID
  uid               String   @default("") @map("uid")
  /// Account type
  type              String   @map("type")
  /// Provider  
  provider          String   @map("provider")
  /// Provider account ID
  providerAccountId String   @map("provider_account_id")
  /// Refresh token
  refreshToken      String?  @map("refresh_token")
  /// Access token
  accessToken       String?  @map("access_token")
  /// Token expiration timestamp
  expiresAt         Int?     @map("expires_at")
  /// Scope
  scope             String?  @map("scope")
  /// Create timestamp
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt         DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  /// Primary key
  pk             BigInt    @id @default(autoincrement())
  /// UID
  uid            String    @unique @map("uid")
  /// Username
  name           String    @unique @map("name")
  /// Nickname
  nickname       String?   @map("nickname")
  /// Email
  email          String?   @unique @map("email")
  /// Avatar url
  avatar         String?   @map("avatar")
  /// Email verified timestamp
  emailVerified  DateTime? @map("email_verified") @db.Timestamptz()
  /// Password
  password       String?   @map("password")
  /// UI language setting
  uiLocale       String?   @map("ui_locale")
  /// Output language setting
  outputLocale   String?   @map("output_locale")
  /// Whether the user has beta access
  hasBetaAccess  Boolean   @default(false) @map("has_beta_access")
  /// Stripe customer ID
  customerId     String?   @map("customer_id")
  /// Stripe subscription ID
  subscriptionId String?   @map("subscription_id")
  /// Create timestamp
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("users")
}

// Conversation
model Conversation {
  /// Primary key
  pk              BigInt   @id @default(autoincrement())
  /// Conversation ID
  convId          String   @unique @default("") @map("conv_id")
  /// Project ID
  projectId       String?  @map("project_id")
  /// Related project
  project         Project? @relation(fields: [projectId], references: [projectId])
  /// UID
  uid             String   @default("") @map("uid")
  /// Conversation title
  title           String   @map("title")
  /// Last message content
  lastMessage     String   @default("") @map("last_message")
  /// Message count
  messageCount    Int      @default(0) @map("message_count")
  /// Conversation origin page
  origin          String   @default("") @map("origin")
  // Conversation origin page url
  originPageUrl   String   @default("") @map("origin_page_url")
  /// Conversation source page title
  originPageTitle String   @default("") @map("origin_page_title")
  /// Create timestamp
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt       DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([uid, updatedAt])
  @@map("conversations")
}

/// Conversation messages
model ChatMessage {
  /// Primary key
  pk             BigInt      @id @default(autoincrement())
  /// Message id
  msgId          String      @default("") @map("msg_id")
  /// Conversation ID
  convId         String      @default("") @map("conv_id")
  /// Skill job ID
  jobId          String      @default("") @map("job_id")
  /// Span id
  spanId         String?     @map("span_id")
  /// Message type
  type           MessageType @map("type")
  /// UID
  uid            String      @default("") @map("uid")
  /// Message content
  content        String      @map("content")
  /// Skill metadata
  skillMeta      String      @default("{}") @map("skill_meta")
  /// Logs output
  logs           String      @default("[]") @map("logs")
  /// Structured data output (JSON)
  structuredData String      @default("{}") @map("structured_data")
  /// Errors
  errors         String?     @map("errors")
  /// Tool calls (JSON array)
  toolCalls      String?     @map("tool_calls")
  /// Token usage summary
  tokenUsage     String?     @map("token_usage")
  /// Skill invocation parameters (JSON of `InvokeSkillRequest`)
  invokeParam    String?     @map("invoke_param")
  /// Locale setting
  locale         String?     @default("") @map("locale")
  /// Create timestamp
  createdAt      DateTime    @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt      DateTime    @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([convId, updatedAt])
  @@map("chat_messages")
}

model TokenUsage {
  /// Primary key
  pk               BigInt   @id @default(autoincrement())
  /// UID
  uid              String   @map("uid")
  /// Conversation ID
  convId           String?  @map("conv_id")
  /// Skill job ID
  jobId            String   @map("job_id")
  /// Span id
  spanId           String   @map("span_id")
  /// Model tier
  tier             String   @map("tier")
  /// Model provider
  modelProvider    String   @map("model_provider")
  /// Model name
  modelName        String   @map("model_name")
  /// Input tokens
  inputTokens      Int      @default(0) @map("input_tokens")
  /// Output tokens
  outputTokens     Int      @default(0) @map("output_tokens")
  /// Skill id
  skillId          String?  @map("skill_id")
  /// Skill template name
  skillTplName     String   @map("skill_tpl_name")
  /// Skill display name
  skillDisplayName String   @map("skill_display_name")
  /// Create timestamp
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([uid, createdAt])
  @@map("token_usages")
}

model StaticFile {
  /// Primary key
  pk          BigInt    @id @default(autoincrement())
  /// UID
  uid         String    @map("uid")
  /// Storage key
  storageKey  String    @map("storage_key")
  /// Storage size (in bytes)
  storageSize BigInt    @default(0) @map("storage_size")
  /// Entity id
  entityId    String?   @map("entity_id")
  /// Entity type
  entityType  String?   @map("entity_type")
  /// Expiration timestamp
  expiredAt   DateTime? @map("expired_at") @db.Timestamptz()
  /// Create timestamp
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  /// Soft delete timestamp
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz()

  @@index([uid, entityId, entityType])
  @@map("static_files")
}

model Resource {
  /// Primary key
  pk             BigInt    @id @default(autoincrement())
  /// Resource id
  resourceId     String    @unique @map("resource_id")
  /// Resource type
  resourceType   String    @default("") @map("resource_type")
  /// UID
  uid            String    @map("uid")
  /// Word count
  wordCount      Int       @default(0) @map("word_count")
  /// Content preview
  contentPreview String?   @map("content_preview")
  /// Content storage key
  storageKey     String?   @map("storage_key")
  /// Content storage size (in bytes)
  storageSize    BigInt    @default(0) @map("storage_size")
  /// Vector storage size (in bytes)
  vectorSize     BigInt    @default(0) @map("vector_size")
  /// Index status
  indexStatus    String    @default("init") @map("index_status")
  /// Title
  title          String    @map("title")
  /// Resource identifier
  identifier     String?   @map("identifier")
  /// Resource metadata
  meta           String    @map("meta")
  /// Create timestamp
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  /// Soft delete timestamp
  deletedAt      DateTime? @map("deleted_at") @db.Timestamptz()

  @@index([uid, identifier, deletedAt, updatedAt])
  @@map("resources")
}

model Canvas {
  /// Primary key
  pk              BigInt    @id @default(autoincrement())
  /// Canvas id
  canvasId        String    @unique @map("canvas_id")
  /// Project id
  projectId       String?   @map("project_id")
  /// Related project
  project         Project?  @relation(fields: [projectId], references: [projectId])
  /// UID
  uid             String    @map("uid")
  /// Canvas title
  title           String    @default("Untitled") @map("title")
  /// Word count
  wordCount       Int       @default(0) @map("word_count")
  /// Content of resource (deprecated)
  content         String?   @map("content")
  /// Content preview
  contentPreview  String?   @map("content_preview")
  /// Content storage key
  storageKey      String?   @map("storage_key")
  /// Content storage size (in bytes)
  storageSize     BigInt    @default(0) @map("storage_size")
  /// Vector storage size (in bytes)
  vectorSize      BigInt    @default(0) @map("vector_size")
  /// Yjs state storage key
  stateStorageKey String    @default("") @map("state_storage_key")
  /// Share code
  shareCode       String?   @map("share_code")
  /// Whether this canvas is readonly
  readOnly        Boolean   @default(false) @map("read_only")
  /// Create timestamp
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  /// Soft delete timestamp
  deletedAt       DateTime? @map("deleted_at") @db.Timestamptz()
  /// Display order within project
  order           Int       @default(0) @map("order")

  @@index([uid, deletedAt, updatedAt])
  @@index([shareCode])
  @@map("canvases")
}

model Project {
  /// Primary key
  pk            BigInt         @id @default(autoincrement())
  /// Project id
  projectId     String         @unique @map("project_id")
  /// Project title
  title         String         @map("title")
  /// Project description
  description   String?        @map("description")
  /// UID
  uid           String         @map("uid")
  /// Share code
  shareCode     String?        @map("share_code")
  /// Create timestamp
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt     DateTime       @updatedAt @map("updated_at") @db.Timestamptz()
  /// Soft delete timestamp
  deletedAt     DateTime?      @map("deleted_at") @db.Timestamptz()
  /// Related canvases
  canvases      Canvas[]
  /// Related conversations
  conversations Conversation[]

  @@index([uid, updatedAt])
  @@index([shareCode])
  @@map("projects")
}

model ProjectResourceRelation {
  /// Primary key
  pk         BigInt   @id @default(autoincrement())
  /// Project id
  projectId  String   @map("project_id")
  /// Resource id
  resourceId String   @map("resource_id")
  /// UID
  uid        String   @default("") @map("uid")
  /// Create timestamp
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz()
  /// Display order within project
  order      Int      @default(0) @map("order")

  @@unique([projectId, resourceId])
  @@index([resourceId])
  @@index([projectId, order])
  @@map("project_resource_relations")
}

model Reference {
  /// Primary key
  pk          BigInt    @id @default(autoincrement())
  /// Reference ID
  referenceId String    @unique @map("reference_id")
  /// Source entity type (e.g., "canvas" or "resource")
  sourceType  String    @map("source_type")
  /// Source entity ID
  sourceId    String    @map("source_id")
  /// Source entity metadata (JSON), should only be used for external url references
  sourceMeta  String?   @map("source_meta")
  /// Target entity type (e.g., "canvas", "resource", "externalUrl")
  targetType  String    @map("target_type")
  /// Target entity ID
  targetId    String    @map("target_id")
  /// Target entity metadata (JSON), should only be used for external url references
  targetMeta  String?   @map("target_meta")
  /// UID of the user who created the reference
  uid         String    @map("uid")
  /// Create timestamp
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  /// Soft delete timestamp
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz()

  @@unique([sourceType, sourceId, targetType, targetId])
  @@index([sourceType, sourceId])
  @@index([targetType, targetId])
  @@map("references")
}

/// User-defined skills.
model SkillInstance {
  /// Primary key
  pk               BigInt    @id @default(autoincrement())
  /// Skill id
  skillId          String    @unique @map("skill_id")
  /// Skill template name
  tplName          String    @default("") @map("tpl_name")
  /// Skill display name
  displayName      String    @default("") @map("display_name")
  /// Skill description
  description      String    @default("") @map("description")
  /// Skill icon
  icon             String    @default("{}") @map("icon")
  /// UID of skill owner
  uid              String    @map("uid")
  /// Skill invocation config (JSON)
  invocationConfig String?   @map("invocation_config")
  /// Skill config schema (JSON)
  configSchema     String?   @map("config_schema")
  /// Skill template config (JSON)
  tplConfig        String?   @map("tpl_config")
  /// Whether this skill is pinned
  pinnedAt         DateTime? @map("pinned_at") @db.Timestamptz()
  /// Create timestamp
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt        DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  /// Deletion timestamp
  deletedAt        DateTime? @map("deleted_at") @db.Timestamptz()

  @@index([uid, updatedAt])
  @@map("skill_instances")
}

model SkillTrigger {
  /// Primary key
  pk              BigInt    @id @default(autoincrement())
  /// Trigger display name
  displayName     String    @default("") @map("display_name")
  /// Trigger id
  triggerId       String    @unique @map("trigger_id")
  /// Trigger type
  triggerType     String    @map("trigger_type")
  /// Skill id
  skillId         String    @map("skill_id")
  /// Owner UID
  uid             String    @map("uid")
  /// Simple event name
  simpleEventName String?   @map("simple_event_name")
  /// Timer config (required when triggerType is `timer`)
  timerConfig     String?   @map("timer_config")
  /// Skill input
  input           String?   @map("input")
  /// Skill context
  context         String?   @map("context")
  /// Skill template config (JSON)
  tplConfig       String?   @map("tpl_config")
  /// Whether this skill is enabled
  enabled         Boolean   @map("enabled")
  /// Bull job id (for timer trigger)
  bullJobId       String?   @map("bull_job_id")
  /// Create timestamp
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  /// Deletion timestamp
  deletedAt       DateTime? @map("deleted_at") @db.Timestamptz()

  @@index([skillId, deletedAt])
  @@map("skill_triggers")
}

model SkillJob {
  /// Primary key
  pk               BigInt   @id @default(autoincrement())
  /// Skill job id
  jobId            String   @unique @map("job_id")
  /// Skill id
  skillId          String   @map("skill_id")
  /// Skill display name
  skillDisplayName String   @map("skill_display_name")
  /// UID of skill owner
  uid              String   @map("uid")
  /// Input (JSON of `SkillInput`)
  input            String   @map("input")
  /// Context (JSON of `SkillContext`)
  context          String   @map("context")
  /// Skill template config (JSON)
  tplConfig        String?  @map("tpl_config")
  /// Skill job status (refer to `SkillJobStatus`)
  status           String   @map("status")
  /// Skill trigger id
  triggerId        String?  @map("trigger_id")
  /// Conversation ID
  convId           String?  @map("conv_id")
  /// Create timestamp
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([uid, updatedAt])
  @@map("skill_jobs")
}

model LabelClass {
  /// Primary key
  pk           BigInt          @id @default(autoincrement())
  /// Label class ID
  labelClassId String          @unique @map("label_class_id")
  /// UID
  uid          String          @map("uid")
  /// Label kind icon
  icon         String          @default("") @map("icon")
  /// Label class name (must be unique for a single user)
  name         String          @map("name")
  /// Label display name
  displayName  String          @map("display_name")
  /// Label creation instruction prompt
  prompt       String          @map("prompt")
  /// Create timestamp
  createdAt    DateTime        @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt    DateTime        @updatedAt @map("updated_at") @db.Timestamptz()
  /// Deletion timestamp
  deletedAt    DateTime?       @map("deleted_at") @db.Timestamptz()
  /// Related labels
  labels       LabelInstance[]

  @@unique([uid, name])
  @@index([uid, deletedAt, updatedAt])
  @@map("label_classes")
}

model LabelInstance {
  /// Primary key
  pk           BigInt     @id @default(autoincrement())
  /// Label ID
  labelId      String     @unique @map("label_id")
  /// Label class
  labelClass   LabelClass @relation(fields: [labelClassId], references: [labelClassId])
  /// Label class ID
  labelClassId String     @map("label_class_id")
  /// Label value
  value        String     @map("value")
  /// Entity type this label belongs to
  entityType   String     @map("entity_type")
  /// Entity ID this label belongs to (resourceId, collectionId, etc.)
  entityId     String     @map("entity_id")
  /// UID
  uid          String     @map("uid")
  /// Create timestamp
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt    DateTime   @updatedAt @map("updated_at") @db.Timestamptz()
  /// Deletion timestamp
  deletedAt    DateTime?  @map("deleted_at") @db.Timestamptz()

  @@index([entityType, entityId])
  @@map("label_instances")
}

model SubscriptionUsageQuota {
  /// Primary key
  pk                 BigInt   @id @default(autoincrement())
  /// Subscription plan type
  planType           String   @unique @map("plan_type")
  /// Token quota (T1)
  t1TokenQuota       Int      @default(0) @map("t1_token_quota")
  /// Token quota (T2)
  t2TokenQuota       Int      @default(1000000) @map("t2_token_quota")
  /// Object storage quota (in bytes), including resource, canvas and static files
  objectStorageQuota BigInt   @default(1000000000) @map("object_storage_quota")
  /// Vector storage quota (in bytes)
  vectorStorageQuota BigInt   @default(1000000000) @map("vector_storage_quota")
  /// Create timestamp
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt          DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([planType])
  @@map("subscription_usage_quotas")
}

model Subscription {
  /// Primary key
  pk             BigInt    @id @default(autoincrement())
  /// Stripe subscription ID
  subscriptionId String    @unique @map("subscription_id")
  /// Stripe price lookup key
  lookupKey      String    @map("lookup_key")
  /// Plan type (free, pro, max, etc.)
  planType       String    @map("plan_type")
  /// Billing interval (monthly, yearly, etc.)
  interval       String?   @map("interval")
  /// UID
  uid            String    @map("uid")
  /// Stripe subscription status
  status         String    @map("status")
  /// Cancel timestamp
  cancelAt       DateTime? @map("cancel_at") @db.Timestamptz()
  /// Create timestamp
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([uid])
  @@map("subscriptions")
}

model TokenUsageMeter {
  /// Primary key
  pk             BigInt    @id @default(autoincrement())
  /// Meter ID
  meterId        String    @unique @map("meter_id")
  /// UID
  uid            String    @map("uid")
  /// Subscription ID
  subscriptionId String?   @map("subscription_id")
  /// Meter start timestamp
  startAt        DateTime  @map("start_at") @db.Timestamptz()
  /// Meter end timestamp
  endAt          DateTime? @map("end_at") @db.Timestamptz()
  /// Token quota (T1)
  t1TokenQuota   Int       @default(0) @map("t1_token_quota")
  /// Token used (T1)
  t1TokenUsed    Int       @default(0) @map("t1_token_used")
  /// Token quota (T2)
  t2TokenQuota   Int       @default(0) @map("t2_token_quota")
  /// Token used (T2)
  t2TokenUsed    Int       @default(0) @map("t2_token_used")
  /// Create timestamp
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  /// Deletion timestamp
  deletedAt      DateTime? @map("deleted_at") @db.Timestamptz()

  @@index([uid, deletedAt])
  @@map("token_usage_meters")
}

model StorageUsageMeter {
  /// Primary key
  pk                 BigInt    @id @default(autoincrement())
  /// Meter ID
  meterId            String    @unique @map("meter_id")
  /// UID
  uid                String    @map("uid")
  /// Subscription ID
  subscriptionId     String?   @map("subscription_id")
  /// Object storage quota (in bytes), including resource, canvas and static files
  objectStorageQuota BigInt    @default(0) @map("object_storage_quota")
  /// Resource storage size in use (in bytes)
  resourceSize       BigInt    @default(0) @map("resource_size")
  /// Canvas storage size in use (in bytes)
  canvasSize         BigInt    @default(0) @map("note_size")
  /// Static file storage size in use (in bytes)
  fileSize           BigInt    @default(0) @map("file_size")
  /// Vector storage size quota (in bytes)
  vectorStorageQuota BigInt    @default(0) @map("vector_storage_quota")
  /// Vector storage size used (in bytes)
  vectorStorageUsed  BigInt    @default(0) @map("vector_storage_used")
  /// Last synced timestamp
  syncedAt           DateTime? @map("synced_at") @db.Timestamptz()
  /// Create timestamp
  createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt          DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  /// Deletion timestamp
  deletedAt          DateTime? @map("deleted_at") @db.Timestamptz()

  @@index([uid, deletedAt])
  @@map("storage_usage_meters")
}

model ModelInfo {
  /// Primary key
  pk        BigInt   @id @default(autoincrement())
  /// Model name
  name      String   @unique @map("name")
  /// Model label
  label     String   @map("label")
  /// Model provider
  provider  String   @map("provider")
  /// Model tier
  tier      String   @map("tier")
  /// Whether this model is enabled
  enabled   Boolean  @default(true) @map("enabled")
  /// Create timestamp
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("model_infos")
}

model CheckoutSession {
  /// Primary key
  pk             BigInt   @id @default(autoincrement())
  /// Stripe checkout session ID
  sessionId      String   @map("session_id")
  /// UID
  uid            String   @map("uid")
  /// Price lookup key
  lookupKey      String   @map("lookup_key")
  /// Payment status
  paymentStatus  String?  @map("payment_status")
  /// Stripe subscription ID
  subscriptionId String?  @map("subscription_id")
  /// Stripe invoice ID
  invoiceId      String?  @map("invoice_id")
  /// Stripe customer ID
  customerId     String?  @map("customer_id")
  /// Create timestamp
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz()
  /// Update timestamp
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([sessionId])
  @@map("checkout_sessions")
}

enum MessageType {
  ai
  human
  system
}
